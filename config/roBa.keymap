#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <input/processors.dtsi>

&mkp_input_listener {
    input-processors = <&zip_temp_layer 1 250>; // AMLのダブルクリック猶予
};

&mt {
    flavor = "balanced";
    quick-tap-ms = <200>; // TAP & HOLD でTAP側のキーが長押し扱いになる設定
};

&lt {
    quick-tap-ms = <200>; // TAP & HOLD でTAP側のキーが長押し扱いになる設定
};

&trackball {
    // automouse-layer = <1>; // 古いAML有効の方法

    scroll-layers = <4>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        left_click {
            bindings = <&mkp MB1>;
            key-positions = <18 19>;
        };

        right_click {
            bindings = <&mkp MB2>;
            key-positions = <19 20>;
        };

        middle_click {
            bindings = <&mkp MB3>;
            key-positions = <18 20>;
        };

        han_zen {
            bindings = <&kp GRAVE>;
            key-positions = <2 1>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <23 24>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <24 25>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <11 12 13>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <18 19 20>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        double_click: double_click {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp MB1 &mkp MB1>;
            label = "DOUBLE_CLICK";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp SEMICOLON   &kp SLASH     &kp COMMA    &kp PERIOD                                          &kp W                 &kp R  &kp Y  &kp M  &kp P
&kp A      &kp I           &kp U         &kp E        &kp O        &trans         &kp LA(UP)              &kp K                 &kp S  &kp T  &kp N  &kp H
&kp Z      &kp X           &kp C         &kp V        &kp L        &mo 4          &double_click           &kp G                 &kp J  &kp D  &kp F  &lt 3 B
&kp LCTRL  &kp LEFT_SHIFT  &kp LEFT_WIN  &lt 3 ENTER  &lt 2 SPACE  &lt 1 TAB      &mt LEFT_ALT BACKSPACE  &mt LEFT_SHIFT MINUS                       &kp SQT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        MOUSE_AML {
            bindings = <
&kp ESC    &kp LC(SEMICOLON)  &kp LC(SLASH)  &kp LC(R)  &kp LC(T)                          &kp LC(RIGHT_BRACKET)  &kp PAGE_UP  &kp UP    &kp PAGE_DOWN  &kp LC(BSLH)
&kp LC(A)  &kp LC(S)          &kp LC(D)      &kp LC(F)  &kp LC(G)      &trans      &trans  &kp HOME               &kp LEFT     &kp DOWN  &kp RIGHT      &kp END
&kp LC(Z)  &kp LC(X)          &kp LC(C)      &kp LC(V)  &kp LS(LC(K))  &trans      &trans  &mkp MB4               &mkp MB1     &mkp MB3  &mkp MB2       &trans
&trans     &trans             &trans         &trans     &trans         &trans      &trans  &kp GRAVE                                                    &kp LC(COLON)
            >;
        };

        MOUSE {
            bindings = <
&kp ESC    &kp LC(SEMICOLON)  &kp LC(SLASH)  &kp LC(R)  &kp LC(T)                          &kp LC(RIGHT_BRACKET)  &kp PAGE_UP  &kp UP    &kp PAGE_DOWN  &kp LC(BSLH)
&kp LC(A)  &kp LC(S)          &kp LC(D)      &kp LC(F)  &kp LC(G)      &trans      &trans  &kp HOME               &kp LEFT     &kp DOWN  &kp RIGHT      &kp END
&kp LC(Z)  &kp LC(X)          &kp LC(C)      &kp LC(V)  &kp LS(LC(K))  &trans      &trans  &mkp MB4               &mkp MB1     &mkp MB3  &mkp MB2       &trans
&trans     &trans             &trans         &trans     &trans         &trans      &trans  &kp GRAVE                                                    &kp LC(COLON)
            >;
        };

        NUM {
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &kp PRINTSCREEN                       &kp LS(0x87)          &kp N7  &kp N8  &kp N9  &kp LEFT_BRACKET
&kp F5  &kp F6   &kp F7   &kp F8   &trans           &trans      &trans   &kp INT_YEN           &kp N4  &kp N5  &kp N6  &kp RIGHT_BRACKET
&kp F9  &kp F10  &kp F11  &kp F12  &trans           &trans      &trans   &kp N0                &kp N1  &kp N2  &kp N3  &kp BSLH
&trans  &trans   &trans   &trans   &trans           &trans      &kp DEL  &mt LEFT_SHIFT EQUAL                          &trans
            >;
        };

        SCROLL {
            bindings = <
&kp LC(LA(DELETE))  &trans  &trans  &trans  &trans                               &kp LC(W)     &kp LC(PAGE_UP)   &kp LC(LG(D))   &kp LC(PAGE_DOWN)  &kp LC(P)
&trans              &trans  &trans  &trans  &kp LG(TAB)  &trans         &trans   &kp LC(HOME)  &kp LC(LG(LEFT))  &kp LC(LG(F4))  &kp LC(LG(RIGHT))  &kp LC(END)
&trans              &trans  &trans  &trans  &trans       &trans         &trans   &mkp MB4      &mkp MB1          &mkp MB3        &mkp MB2           &trans
&trans              &trans  &trans  &trans  &trans       &kp LCTRL      &kp ESC  &kp ENTER                                                          &trans
            >;
        };

        BT {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
